?usethis::use_package
usethis::use_package("mlr", type = "Depends")
usethis::use_mit_license()
version()
library(mlr)
devtools::load_all(".")
install.package("mlrMBO")
install.packages("mlrMBO")
devtools::load_all(".")
devtools::load_all(".")
install.packages("mlr")
install.packages("mlr")
install.packages("mlr")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?aggregation
?Aggregation
devtools::load_all(".")
devtools::document()
?strategy
?makeStrategy
?aggregation
?Aggregation
?makeStrategy
devtools::load_all(".")
devtools::document()
?makeStrategy
iris.task
?strategy
devtools::load_all(".")
?makeStrategy
?strategy
devtools::document()
?makeStrategy
devtools::document()
?makeStrategy
?strategy
devtools::load_all(".")
devtools::document()
?strategy
?makeS3Obj
?makeWrappedModel
?makeLearner
?makeStrategy
?strategy
?task
?Task
iris.task
iris.task$type
listLearnerProperties()
?listLearnerProperties
listLearnerProperties("classif")
listLearnerProperties("regr")
listLearnerProperties("cluster")
listTaskTypes()
getLearnerProperties("classif.xgboost")
?makeLearner
?makeRLearner
a <- list(a = 1, b = 2)
a$a
find(a, where = a)
get("a")
get("a")$a
get("a")[["a"]]
get("a")[["b"]]
lrn
?setPredictThreshold
devtools::load_all(".")
devtools::document()
?makeStrategy
stg <- makeStrategy("autoxgb", fun = function(x) { print("It worked") })
?assertFunction
stg <- makeStrategy("autoxgb", fun = function(x) { print("It worked") })
devtools::load_all(".")
stg <- makeStrategy("autoxgb", fun = function(x) { print("It worked") })
stg <- makeStrategy("autoxgb", fun = function(task, pars) { print("It worked") })
stg
?makeWrappedLearner
wl <- makeWrappedLearner("stg", iris.task)
wl <- makeWrappedLearner("stg", task = iris.task)
get("strategy")
get("stg")
devtools::load_all(".")
wl <- makeWrappedLearner("stg", task = iris.task)
devtools::load_all(".")
